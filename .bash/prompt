#!/usr/bin/env bash

#
# Configure Bash prompt.
# Depends on .bash/colors
#


# GIT prompt configuration, used by __git_ps1, so the _are_ used.
# shellcheck disable=SC2034
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWUPSTREAM="auto"
GIT_PS1_SHOWCOLORHINTS=1


#
# Whether or not we have a Python virtual environment (venv) running.
#
has_virtualenv() {
    if test -n "$VIRTUAL_ENV"; then
        return 0
    fi
    return 1
}


#
# Sourcing virtualenv's ./bin/activate should do this, but this modifies the PS1
# environment variable... which has no effect, due to the standard usage of the
# __git_ps1() function.
#
prompt_fragment_virtualenv() {
    if has_virtualenv; then
        echo "\[${RED}\]\[${REVERSE}\] $(basename "$VIRTUAL_ENV") \[${NORMAL}\]"
    fi
}


#
# The fragment in the prompt at the line the cursor is on.
#
prompt_fragment_cursor_line() {
    echo "\[${NORMAL}\]$ "
}


#
# Fragment in the prompt that shows the current timestamp.
#
prompt_fragment_timestamp() {
    echo "\[${REVERSE}\]\[${BOLD}\]\[${POWDER_BLUE}\] \t \[${NORMAL}\]"
}


#
# Fragment in the prompt showing the exit code of the previous executed command.
#
prompt_fragment_exit_code() {
    echo "\[${REVERSE}\]\[${BOLD}\]\[${CYAN}\] \$? \[${NORMAL}\]"
}


#
# Fragment in the prompt showing the current working directory.
#
prompt_fragment_cwd() {
    echo "\[${REVERSE}\]\[${BOLD}\] \w \[${NORMAL}\]"
}


# Thanks @janmoesen for pointing me to the \[\] surrounding the non-printing
# chars.  These are necessary to prevent issues with command line editing,
# -browsing, -completion.
PROMPT_COMMAND='declare -F __git_ps1 &>/dev/null && __git_ps1 "$(prompt_fragment_timestamp)$(prompt_fragment_exit_code)$(prompt_fragment_cwd)$(prompt_fragment_virtualenv)" "\n$(prompt_fragment_cursor_line)"'
INITIAL_PROMPT_COMMAND=$PROMPT_COMMAND


#
# Simple prompt, mainly without fancy coloring and without git info.
# Useful when in a big directory: if you'd leave the git part on, the prompt
# will take _seconds_ before it appears.
#
prompt_simple() {
    PROMPT_COMMAND='PS1="$(prompt_fragment_cwd) "'
}


#
# Restore the prompt back to its initial state.
#
prompt_restore() {
    PROMPT_COMMAND=$INITIAL_PROMPT_COMMAND
}
