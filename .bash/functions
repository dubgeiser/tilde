#!/usr/bin/env bash

#
# Bash functions
# self-written, copied, adapted...
# If not written myself, I probably took/stole/adapted it from
# Gary Bernhardt, Jan Moesen, Dave Lens, or some other dude(tte) on the web.
#


#
# Shared variables
# Keep these to a minimum!
#

# Where are projects checked out?
# No trailing slash!
DIR_PROJECTS=~/Projects


#
# Attach to an existing tmux session, create the session if it doesn't exist.
# If no session is given, create one based on the current working directory.
#
tat() {
    local project=$1
    local switch=""

    if [[ "$project" == "" ]]
    then
        project=${1-"$(basename "$PWD" | tr . -)"}
    fi

    # Depending on whether or not we are already in a tmux session (this is why
    # we check for $TMUX before it is created later on), we need to switch to
    # that session differently.
    if [[ "$TMUX" == "" ]]; then
        switch='tmux attach -t'
    else
        switch='tmux switch-client -t'
    fi

    tmux has-session -t "$project" > /dev/null 2>&1
    if [ $? != 0 ]; then
        TMUX='' tmux new-session -s "$project" -d

    fi

    $switch $project
}


#
# Upload a screenshot to imgur "on the fly":
# Let user select region, take screenshot
# Upload screenshot to imgur.com
# Print resulting url to image.
#
# @see http://api.imgur.com/examples
#
imgur() {
    # API Key provided by Alan@imgur.com
    local api_key="b3625162d3418ac51a9ee805b1840452"
    local url_api_upload="http://api.imgur.com/2/upload.xml"

    local fn_image="/tmp/screenshot-`date +%Y-%m-%d-%H-%M-%S`.png"
    screencapture -ix $fn_image
    local response=`curl -s -F "image=@$fn_image" -F "key=$api_key" $url_api_upload`
    echo $response | tail -1 | sed -E 's/.*<original>(.*)<\/original>.*/\1/'
}


#
# Create an SSH config host entry and add my public key to that host.
#
# @param The identifier to use for this SSH host configuration.
# @param The host name.
# @param The username for that host.
#
ssh_configure_host() {
    local identifier=$1
    local hostname=$2
    local username=$3

    if [[ "$identifier" == "" ]] || [[ "$username" == "" ]] || [[ "$hostname" == "" ]]
    then
        echo "usage: ssh_configure_host <identifier> <hostname> <username>"
    else
        echo -e "Host $identifier\n\tHostName $hostname\n\tUser $username\n\tIdentityFile ~/.ssh/id_rsa\n\tForwardAgent yes" >> ~/.ssh/config
        ssh $identifier 'mkdir -p .ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub
        # TODO Use ssh_test_key()?
        tput bold; ssh -o PasswordAuthentication=no $identifier true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0
        ssh_load_autocomplete
    fi
}


#
# adds ~/.ssh/config to the ssh autocomplete
# Call whenever ssh host config changes (@see ssh_configure_host)
#
ssh_load_autocomplete() {
    complete -W "$(awk '/^\s*Host\s*/ { sub(/^\s*Host /, ""); print; }' ~/.ssh/config)" ssh
}


#
# Test a giveh ssh_config host identifier.
#
ssh_test_key() {
    local identifier=$1
    ssh -o PasswordAuthentication=no $identifier true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0
}


#
# Put Tim Pope's sensible vimrc on a ssh-identified server.
#
ssh_install_default_vimrc() {
    local identifier=$1
    if [[ "$identifier" == "" ]]
    then
        echo "usage: ssh_install_default_vimrc <identifier>"
    else
        ssh $identifier 'curl https://raw.githubusercontent.com/tpope/vim-sensible/master/plugin/sensible.vim > ~/.vimrc'
    fi
}


#
# Change to a project directory quickly, using FZF.
#
prj() {
    local project=$(ls $DIR_PROJECTS | fzf)
    if [[ "$project" != "" ]]
    then
        cd "$DIR_PROJECTS/$project"
    fi
}
