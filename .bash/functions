#!/usr/bin/env bash

#
# Bash functions
# self-written, copied, adapted...
# If not written myself, I probably took/stole/adapted it from
# Gary Bernhardt, Jan Moesen, Dave Lens, or some other dude(tte) on the web.
#


#
# Attach to an existing tmux session, create the session if it doesn't exist.
# If no session is given, create one based on the current working directory.
#
tmux_attach() {
    local project=$1
    local switch=""

    if [[ "$project" == "" ]]
    then
        project=${1-"$(basename "$PWD" | tr . -)"}
    fi

    # Depending on whether or not we are already in a tmux session (this is why
    # we check for $TMUX before it is created later on), we need to switch to
    # that session differently.
    if [[ "$TMUX" == "" ]]; then
        switch='tmux attach -t'
    else
        switch='tmux switch-client -t'
    fi

    tmux has-session -t "$project" > /dev/null 2>&1 || TMUX='' tmux new-session -s "$project" -d
    $switch "$project"
}


#
# Create an SSH config host entry and add my public key to that host.
#
# @param The identifier to use for this SSH host configuration.
# @param The host name.
# @param The username for that host.
#
ssh_configure_host() {
    local identifier=$1
    local hostname=$2
    local username=$3

    if [[ "$identifier" == "" ]] || [[ "$username" == "" ]] || [[ "$hostname" == "" ]]
    then
        echo "usage: ssh_configure_host <identifier> <hostname> <username>"
    else
        echo -e "Host $identifier\n\tHostName $hostname\n\tUser $username\n\tIdentityFile ~/.ssh/id_rsa\n\tForwardAgent yes" >> ~/.ssh/config
        ssh "$identifier" 'mkdir -p .ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub
        # TODO Use ssh_test_key()?
        tput bold; ssh -o PasswordAuthentication=no "$identifier" true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0
        ssh_load_autocomplete
    fi
}


#
# Test a giveh ssh_config host identifier.
#
ssh_test_key() {
    local identifier=$1
    ssh -o PasswordAuthentication=no "$identifier" true && { tput setaf 2; echo 'Success!'; } || { tput setaf 1; echo 'Failure'; }; tput sgr0
}


#
# Put Tim Pope's sensible vimrc on a ssh-identified server.
#
ssh_install_default_vimrc() {
    local identifier=$1
    if [[ "$identifier" == "" ]]
    then
        echo "usage: ssh_install_default_vimrc <identifier>"
    else
        ssh "$identifier" 'curl https://raw.githubusercontent.com/tpope/vim-sensible/master/plugin/sensible.vim > ~/.vimrc'
    fi
}


#
# Return the user for a given SSH identifier.
#
ssh_user() {
    local sshidentifier=$1
    local hostregex

    hostregex=$(echo "$sshidentifier" | $SED -E 's/\./\\\./')
    echo $($SED -nE '/^\s*Host\s+'"$hostregex"'/,/^\s*User/p' ~/.ssh/config | grep User | $SED -E 's/^\s*User\s+//')
}


#
# Change to a project directory quickly.
# If no argument was given, use FZF to select one.
#
goto_project() {
    local project=$1
    if [[ "$project" == "" ]]
    then
        project=$(find "$DIR_PROJECTS" -type d -maxdepth 1 | cut -d/ -f5 | $FZF_PREVIEW "ls $DIR_PROJECTS/{}")
    fi
    if [[ "$project" != "" ]]
    then
        cd "$DIR_PROJECTS"/"$project" || return
    fi
}


#
# Execute a drush command on a server via ssh
#
# @param The SSH identifier (as exported by domainator).
# @param The Drush command to execute on the server.
#
ssh_drush() {
    local sshidentifier=$1
    local drushcmd=$2
    local appname

    if [[ "$sshidentifier" == "" ]] || [[ "$drushcmd" == "" ]]
    then
        echo "usage: ssh_drush <identifier> <drush command>"
    else

        # Determine the name of the application, based on the ssh identifier.
        #
        # Strip out '-' because this is also done to the appname on the server.
        # Ex: 'this-app.prod' will reside under '~/apps/thisapp/current' on the
        # production server.
        appname=$(echo "$sshidentifier" | $SED -E 's/\.(test|qa|prod)//' | $SED -E 's/-//')

        # The name of an application is max 14 chars.
        appname=${appname:0:14}

        ssh "$sshidentifier" 'cd apps/'"$appname"'/current && drush '"$drushcmd"''
    fi
}


#
# Shortcut for executing a `drush uli` on a server.
# uses ssh_drush() and pipes the output to the clipboard so it can be pasted
# directly in the location bar, or a secure chat, etc...
#
# @param The SSH identifier (as exported by Domainator).
#
uli() {
    local sshidentifier=$1

    ssh_drush "$sshidentifier" uli | $SED -e 's/http:\/\/default//' | tr -d '\n' | pbcopy
}

#
# Copy over a file from the template directory in the current directory.
# Use FZF to facilitate typing.
#
tpl() {
    local filename
    # The slash fest after $DIR_TEMPLATES is Shell Parameter Expansion with
    # replacing every '/' with '\/' to not trip up sed because of the slashes
    # in the file name.
    # See: https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameter-Expansion
    filename=$(find "$DIR_TEMPLATES" -type f | $SED -e "s/${DIR_TEMPLATES//\//\\/}\///"| $FZF_PREVIEW "head -30 $DIR_TEMPLATES/{}")
    if [[ "$filename" != "" ]]
    then
        cp "$DIR_TEMPLATES/$filename" ./
    fi
}

#
# Make g function as an alias for git.
# Show a short status by default.
#
g() {
    if [[ $# -gt 0 ]]
    then
        git "$@"
    else
        git s
    fi
}

#
# `pussy` assumes that the previous command was an ssh <sshidentifier> command
# and takes that identifier and redoes the ssh command.
# Most servers I ssh into don't have the xterm-kitty terminfo files.
# kitten ssh behaves like ssh but copies over the terminfo files.
#
pussy() {
    kitty +kitten ssh $_
}
